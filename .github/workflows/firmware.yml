name: Build Firmware
run-name: Build firmware images
env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}
  PACKAGE_NAME: esp32wol_builder
on: 
  push:
    tags: 'v*'
    branches: '**'
    paths-ignore:
      - 'builder/**'
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install requirements
        run: pip install -r requirements-dev.txt
      - name: Bundle python files
        run: |
          rm -R -f .dist
          mkdir -p .dist
          cp -R src/*.py .dist/
      - name: Prepare dist files
        run: python -c "import upload_mpy; upload_mpy.compile_and_minify(compile=False)"
      - name: Bundle static files
        run: python -m freezefs .dist/static .dist/frozen_static.py
      - name: Login to docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build firmware
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.PACKAGE_NAME }}
          docker run --rm -v "$(pwd)/.dist":/mnt/source -v "$(pwd)/built":/mnt/built ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.PACKAGE_NAME }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Firmware
          path: |
            ./built/build-*/firmware.bin
          if-no-files-found: error
          retention-days: 10
      - name: Upload artifact DEBUG
        uses: actions/upload-artifact@v4
        with:
          name: Built-dir
          path: ./built
          if-no-files-found: error
          retention-days: 10
      
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  publish_artifact:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        DEVICE_FAMILY: ["ESP8266","ESP32"]
    steps:
      - name: Donwload Artifact
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: Firmware
      - name: Zip Artifact
        id: zip-artifact
        run: |
          zip -r "${{matrix.DEVICE_FAMILY}}.zip" ${{steps.download-artifacts.outputs.download-path}}/build-${{matrix.DEVICE_FAMILY}}*
          echo "ARTIFACT_ZIP=${{matrix.DEVICE_FAMILY}}.zip" >> "$GITHUB_OUTPUT"
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_url }}
          asset_path: ${{steps.zip-artifact.outputs.ARTIFACT_ZIP}}
          asset_name: "${{matrix.DEVICE_FAMILY}}.zip"
          asset_content_type: application/zip